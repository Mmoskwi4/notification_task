import os
import sys
import django
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'notification_task.settings')
django.setup()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

from django.conf import settings
from django.contrib.auth.models import User
from notifications.service import NotificationService
from notifications.models import UserProfile

def setup_test_user():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user, created = User.objects.get_or_create(
        username='test_user',
        defaults={
            'email': 'test@test.com',
            'first_name': 'Test',
            'last_name': 'User'
        }
    )
    
    if created:
        user.set_password('testpass123')
        user.save()
        logging.info("‚úÖ Created new test user")
    else:
        logging.info("‚úÖ Using existing test user")
    
    profile, _ = UserProfile.objects.get_or_create(
        user=user,
        defaults={
            'phone_number': '+79123456789',
            'telegram_chat_id': '123456789'  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π chat_id –¥–ª—è —Ç–µ—Å—Ç–∞ fallback
        }
    )
    
    return user, profile

def test_basic_fallback():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞"""
    
    logging.info("üß™ BASIC FALLBACK TEST")
    logging.info("=" * 60)
    
    user, profile = setup_test_user()
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: Telegram –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π chat_id), –Ω–æ email —Ä–∞–±–æ—Ç–∞–µ—Ç
    logging.info("\n1. üìã Telegram failed ‚Üí Email fallback")
    service1 = NotificationService(user, "Test 1 - Fallback", "Telegram should fail, Email should work")
    result1 = service1.send()
    report1 = service1.get_delivery_report()
    logging.info(f"   Result: {result1}")
    logging.info(f"   Successful channel: {report1['successful_channel']}")
    logging.info(f"   Failed channels: {report1['failed_channels']}")
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –û—Ç–∫–ª—é—á–∞–µ–º Telegram, –æ—Å—Ç–∞–≤–ª—è–µ–º Email –∏ SMS
    logging.info("\n2. üìã No Telegram ‚Üí Email should work")
    original_telegram = profile.telegram_chat_id
    
    profile.telegram_chat_id = None  # –û—Ç–∫–ª—é—á–∞–µ–º Telegram
    profile.save()
    
    service2 = NotificationService(user, "Test 2 - No Telegram", "Should use Email")
    result2 = service2.send()
    report2 = service2.get_delivery_report()
    logging.info(f"   Result: {result2}")
    logging.info(f"   Successful channel: {report2['successful_channel']}")
    logging.info(f"   Failed channels: {report2['failed_channels']}")
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram
    profile.telegram_chat_id = original_telegram
    profile.save()

def test_sms_fallback():
    """–¢–µ—Å—Ç –∫–æ–≥–¥–∞ —Ç–æ–ª—å–∫–æ SMS –¥–æ—Å—Ç—É–ø–µ–Ω"""
    
    logging.info("\nüß™ SMS FALLBACK TEST")
    logging.info("=" * 60)
    
    user, profile = setup_test_user()
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞ SMS (–Ω–µ –∏–∑–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ)
    temp_user = User.objects.create(
        username='temp_sms_user',
        email='temp@example.com',  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º email
        first_name='Temp',
        last_name='SMS User'
    )
    
    temp_profile = UserProfile.objects.create(
        user=temp_user,
        phone_number='+79123456789',  # –í–∫–ª—é—á–∞–µ–º SMS
        telegram_chat_id=None  # –û—Ç–∫–ª—é—á–∞–µ–º Telegram
    )
    
    logging.info("üìã Only SMS available (Telegram disabled)")
    service = NotificationService(temp_user, "Test - Only SMS", "Should use SMS as fallback")
    result = service.send()
    report = service.get_delivery_report()
    logging.info(f"   Result: {result}")
    logging.info(f"   Successful channel: {report['successful_channel']}")
    logging.info(f"   Failed channels: {report['failed_channels']}")
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    temp_user.delete()

def test_all_channels_failed():
    """–¢–µ—Å—Ç –∫–æ–≥–¥–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç"""
    
    logging.info("\nüß™ ALL CHANNELS FAILED TEST")
    logging.info("=" * 60)
    
    user, profile = setup_test_user()
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
    temp_user = User.objects.create(
        username='temp_failed_user',
        email='test@test.com',
        first_name='Temp',
        last_name='Failed User'
    )
    
    temp_profile = UserProfile.objects.create(
        user=temp_user,
        phone_number=None,  # –û—Ç–∫–ª—é—á–∞–µ–º SMS
        telegram_chat_id=None  # –û—Ç–∫–ª—é—á–∞–µ–º Telegram
    )
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ "–ª–æ–º–∞–µ–º" email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
    original_email_host = getattr(settings, 'EMAIL_HOST', None)
    
    logging.info("üìã All channels disabled")
    service = NotificationService(temp_user, "Test - All Failed", "Should return False")
    result = service.send()
    report = service.get_delivery_report()
    logging.info(f"   Result: {result}")
    logging.info(f"   Successful channel: {report['successful_channel']}")
    logging.info(f"   Failed channels: {report['failed_channels']}")
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    temp_user.delete()

def test_channel_priority():
    """–¢–µ—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    
    logging.info("\nüß™ CHANNEL PRIORITY TEST")
    logging.info("=" * 60)
    
    user, profile = setup_test_user()
    
    scenarios = [
        {
            'name': 'All channels available',
            'telegram': True,
            'expected_priority': 'telegram'
        },
        {
            'name': 'Telegram disabled', 
            'telegram': False,
            'expected_priority': 'email'
        }
    ]
    
    for scenario in scenarios:
        logging.info(f"\nüìã {scenario['name']}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏—é
        original_telegram = profile.telegram_chat_id
        if not scenario['telegram']:
            profile.telegram_chat_id = None
            profile.save()
        
        service = NotificationService(
            user=user,
            subject=f"Priority Test - {scenario['name']}",
            message=f"Testing channel priority. Expected: {scenario['expected_priority']}"
        )
        result = service.send()
        report = service.get_delivery_report()
        
        logging.info(f"   Expected: {scenario['expected_priority']}")
        logging.info(f"   Actual: {report['successful_channel']}")
        logging.info(f"   Match: {'‚úÖ' if report['successful_channel'] == scenario['expected_priority'] else '‚ùå'}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        profile.telegram_chat_id = original_telegram
        profile.save()

def test_real_world_scenarios():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    
    logging.info("\nüåç REAL-WORLD SCENARIOS")
    logging.info("=" * 60)
    
    user, _ = setup_test_user()
    
    scenarios = [
        {
            'name': '–í–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
            'subject': '‚ö†Ô∏è –í–∞–∂–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã',
            'message': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.'
        },
        {
            'name': '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', 
            'subject': 'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
            'message': '–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ.'
        },
        {
            'name': '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ',
            'subject': 'üí∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ',
            'message': '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞.'
        }
    ]
    
    for i, scenario in enumerate(scenarios, 1):
        logging.info(f"\n{i}. {scenario['name']}")
        service = NotificationService(
            user=user,
            subject=scenario['subject'],
            message=scenario['message']
        )
        result = service.send()
        report = service.get_delivery_report()
        logging.info(f"   Result: {'‚úÖ Success' if result else '‚ùå Failed'}")
        logging.info(f"   Channel: {report['successful_channel'] or 'None'}")
        logging.info(f"   Failed: {report['failed_channels']}")

def test_individual_channels():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –æ—Ç–¥–µ–ª—å–Ω–æ"""
    
    logging.info("\nüéØ INDIVIDUAL CHANNEL TESTS")
    logging.info("=" * 60)
    
    user, _ = setup_test_user()
    
    # –¢–µ—Å—Ç Email –∫–∞–Ω–∞–ª–∞
    logging.info("\n1. üìß Testing Email Channel")
    from notifications.channels import EmailChannel
    email_channel = EmailChannel()
    email_result = email_channel.send(user, "Direct Email Test", "Testing email channel directly")
    logging.info(f"   Email result: {'‚úÖ Success' if email_result else '‚ùå Failed'}")
    
    # –¢–µ—Å—Ç Telegram –∫–∞–Ω–∞–ª–∞
    logging.info("\n2. üì≤ Testing Telegram Channel")
    from notifications.channels import TelegramChannel
    telegram_channel = TelegramChannel()
    telegram_result = telegram_channel.send(user, "Direct Telegram Test", "Testing telegram channel directly")
    logging.info(f"   Telegram result: {'‚úÖ Success' if telegram_result else '‚ùå Failed'}")
    
    # –¢–µ—Å—Ç SMS –∫–∞–Ω–∞–ª–∞
    logging.info("\n3. üì± Testing SMS Channel")
    from notifications.channels import TwilioSMSChannel
    sms_channel = TwilioSMSChannel()
    sms_result = sms_channel.send(user, "Direct SMS Test", "Testing SMS channel directly")
    logging.info(f"   SMS result: {'‚úÖ Success' if sms_result else '‚ùå Failed'}")

if __name__ == "__main__":
    test_basic_fallback()
    test_sms_fallback()
    test_all_channels_failed()
    test_channel_priority()
    test_real_world_scenarios()
    test_individual_channels()
    
    logging.info("\nüéâ ALL TESTS COMPLETED!")
    logging.info("=" * 60)
