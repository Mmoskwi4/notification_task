import logging
from .channels import EmailChannel, TwilioSMSChannel, TelegramChannel
from .models import Notification

logger = logging.getLogger(__name__)

class NotificationService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏.
    –†–µ–∞–ª–∏–∑—É–µ—Ç —Ü–µ–ø–æ—á–∫—É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏: –µ—Å–ª–∏ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π.
    """

    def __init__(self, user, subject, message):
        self.user = user
        self.subject = subject
        self.message = message
        # –ü–û–†–Ø–î–û–ö –í–ê–ñ–ï–ù: –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞–Ω–∞–ª–æ–≤
        self.channels = [
            TelegramChannel(),    # –ü–µ—Ä–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –±—ã—Å—Ç—Ä—ã–π –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π
            EmailChannel(),       # –í—Ç–æ—Ä–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –Ω–∞–¥–µ–∂–Ω—ã–π
            TwilioSMSChannel(),   # –¢—Ä–µ—Ç–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
        ]
        self.last_successful_channel = None
        self.failed_channels = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫

    def send(self) -> bool:
        """
        –ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø–æ —Ü–µ–ø–æ—á–∫–µ.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —Ö–æ—Ç—è –±—ã —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª.
        """
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î –æ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        notification = Notification.objects.create(
            user=self.user,
            subject=self.subject,
            message=self.message,
            status='pending'
        )

        logger.info(f"üöÄ Starting notification delivery for user {self.user.username}")
        logger.info(f"Available channels: {[ch.channel_name for ch in self.channels]}")
        logger.info(f"Message: '{self.subject}' - '{self.message[:50]}...'")

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º –ø–æ –ø–æ—Ä—è–¥–∫—É
        for channel in self.channels:
            channel_name = channel.channel_name
            logger.info(f"üîÑ Attempting to send via {channel_name}...")
            
            try:
                success = channel.send(self.user, self.subject, self.message)
                
                if success:
                    # –£—Å–ø–µ—Ö! –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ü–µ–ø–æ—á–∫—É
                    notification.status = 'sent'
                    notification.sent_via = channel_name
                    notification.save()
                    
                    self.last_successful_channel = channel_name
                    logger.info(f"‚úÖ Notification successfully sent via {channel_name}")
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
                    if self.failed_channels:
                        logger.info(f"üìä Skipped channels due to failures: {self.failed_channels}")
                    
                    return True
                else:
                    # –ö–∞–Ω–∞–ª –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π
                    self.failed_channels.append(channel_name)
                    logger.warning(f"‚ùå Channel {channel_name} failed, trying next...")
                    
            except Exception as e:
                # –û—à–∏–±–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π
                self.failed_channels.append(channel_name)
                logger.error(f"üí• Channel {channel_name} error: {e}, trying next...")
                continue

        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –≤—Å–µ –∫–∞–Ω–∞–ª—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        notification.status = 'failed'
        notification.save()
        
        logger.error(f"üíî All delivery channels failed for user {self.user.username}")
        logger.error(f"Failed channels: {self.failed_channels}")
        
        return False

    def get_delivery_report(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—á–µ—Ç –æ –¥–æ—Å—Ç–∞–≤–∫–µ"""
        return {
            'success': self.last_successful_channel is not None,
            'successful_channel': self.last_successful_channel,
            'failed_channels': self.failed_channels,
            'total_channels_attempted': len(self.failed_channels) + (1 if self.last_successful_channel else 0)
        }

def notify_user(user, subject, message):
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.
    """
    service = NotificationService(user, subject, message)
    service.send()
    return service